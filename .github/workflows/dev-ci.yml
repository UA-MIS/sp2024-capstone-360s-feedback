name: 360s Feedback App - CI Workflow - Dev

on:
  push:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Check out the code
    - uses: actions/checkout@v4
    
    # Step 2: Cache dependencies to save time restoring
    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Step 3: Set up .NET (version 6.x)
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x

    # Step 4: Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Step 5: Build the app (skip restore to save time)
    - name: Build the app
      run: dotnet build --no-restore
    
    # Step 6: Run tests and save results
    - name: Run tests
      run: dotnet test --logger "trx" --results-directory "TestResults"
    
    # Step 7: Upload test results as an artifact
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: TestResults
        path: TestResults
    
    # Step 8: Ensure that the workflow fails if tests don't pass
    - name: Fail if tests fail
      if: failure()
      run: exit 1
    
    # Optional Step: Check if .NET version can be updated
    - name: Check for .NET SDK updates
      run: |
        current_version=$(dotnet --list-sdks | grep 6 | awk '{print $1}')
        echo "Current .NET 6 SDK version: $current_version"
        
        latest_version=$(dotnet sdk check | grep 6 | awk 'NR==1{print $3}')
        echo "Latest available .NET 6 SDK version: $latest_version"
    
        if [ "$current_version" != "$latest_version" ]; then
          echo "##[warning]There is a new .NET 6 SDK update available: $latest_version"
        else
          echo "You're already using the latest .NET 6 SDK."
        fi
